; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = .

[common]
build_flags =
  -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
  -DVTABLES_IN_FLASH -DBEARSSL_SSL_BASIC
  -DNDEBUG
  -Wl,-Teagle.flash.4m.ld
;  -Wl,-Teagle.flash.4m3m.ld ; required for platform >= espressif8266@2.2.3 to make SPIFFS work

build_flags_esp32 =
  -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
  -DVTABLES_IN_FLASH -DBEARSSL_SSL_BASIC
build_flags_esp32_release = ${common.build_flags_esp32} -DNDEBUG
build_flags_esp32_debug = ${common.build_flags_esp32} -g -Og -fno-inline -DUSING_JTAG_DEBUGGER_PINS=1 -DDEBUG_ESP_PORT=Serial

board_build.f_cpu = 160000000L
; Always depend on specific library versions (wherever possible and only for external libraries)
; Keep Library names in the order of their dependencies (leaves at the top)
; ESP8266WiFi in both cases is necessary to solve a case sensitivity issue with WiFiUdp.h
; Use library ID numbers instead of names for libraries whose names are not unique
;   (like OneWire, LiquidCrystal_I2C and TinyGPSPlus)

lib_deps_generic_external =
  1@2.3.4 ; OneWire
  576@1.1.4 ; LiquidCrystal_I2C
  ;136 ; LiquidCrystal, alternative to 576 LiquidCrystal_I2C?
  Adafruit BMP085 Library@1.0.1
  Adafruit HTU21DF Library@1.0.2
  ArduinoJson@6.12.0
  DallasTemperature@3.8.0
  ESP8266_SSD1306@4.0.0
  1655@1.0.2 ; TinyGPSPlus, formerly this was referenced as mikalhart/TinyGPSPlus#v0.95

lib_deps_esp8266_external =
  ; Don't reference the SoftwareSerial / ESPSoftwareSerial library here, because it is a system library
  ; and its metadata is corrupt, so specifiying its name here will confuses the ldf. Instead let ldf
  ; find the dependeny by using the include-file
  ; For the ESP32 we disable the ldf automatic mode, because otherwise it will also link with SoftwareSerial
  ; because the parser will not detect correctly, that the inlcude "SoftwaeSerial.h" should only be used
  ; when "ESP8266" is defined.
  plerup/espsoftwareserial#3.4.1 ; get directly from github, because version in platformio has wrong metadata tags and cannot be correctly referenced here (ext. name "SoftwareSerial", internal "ESPSoftwareSerial")
  ;plerup/espsoftwareserial#4.0.0 ; this is the newest version which compiles with esp8266 platform version 1.8.0
  ;plerup/espsoftwareserial#5.0.3 ; this is the newest version compiles with esp8266 platform version 2.2.3
  ;plerup/espsoftwareserial#5.2.9 ; this version needs unpublished 8266 plaform, see https://github.com/plerup/espsoftwareserial/issues/103

lib_deps_esp32_external =

; system libraries from platform -> no version number
lib_deps_esp8266_platform =
  Hash
  Wire
  ESP8266WiFi
  DNSServer
  ESP8266HTTPClient
  ESP8266WebServer
  ESP8266httpUpdate
  ESP8266mDNS

; system libraries from platform -> no version number
lib_deps_esp32_platform =
  Wire
  WiFi
  DNSServer
  WiFiClientSecure
  HTTPClient
  FS
  SPIFFS
  WebServer
  Update
  HTTPUpdate
  ESPmDNS

lib_deps_esp8266 = ${common.lib_deps_esp8266_platform} ${common.lib_deps_esp8266_external} ${common.lib_deps_generic_external}
lib_deps_esp32 = ${common.lib_deps_esp32_platform} ${common.lib_deps_esp32_external} ${common.lib_deps_generic_external}

extra_scripts = platformio_script.py
# This release is reflecting the Arduino Core 2.4.2 release
# When the requirement for Arduino Core is raised, this
# needs to be adjusted to the matching version from
# https://github.com/platformio/platform-espressif8266/releases
platform_version = espressif8266@1.8.0
;platform_version = espressif8266@2.2.3 ; using Arduino core 2.5.2
platform_version_esp32 = espressif32@1.9.0 ; using Arduino core 1.0.2

[env]
;lib_ldf_mode = chain+  ; automatically detect libraries by the used includes
lib_ldf_mode = off  ; all used libs must be explicitly referenced
monitor_speed = 9600

[DISABLEDenv:lolin_d32_pro_debug]
lang = DE
platform = ${common.platform_version_esp32}
framework = arduino
board = lolin_d32_pro
build_flags = ${common.build_flags_esp32_debug} '-DINTL_DE' '-DFLIP_I2C_PMSERIAL'
lib_deps = ${common.lib_deps_esp32}
extra_scripts = ${common.extra_scripts}
debug_tool = custom
targets = debug

[DISABLEDenv:heltec_wifi_lora_32_V2]
lang = DE
platform = ${common.platform_version_esp32}
framework = arduino
board = heltec_wifi_lora_32_V2
; to know if you have a WROVER or WROOM board, look in the file
; .platformio/platforms/espressif32/boards/<your_boardname>.json
; when you find the following line, you have a WROOM board:
;    "openocd_board": "esp-wroom-32.cfg"
build_flags = ${common.build_flags_esp32_release} '-DINTL_DE' '-DESP32_WROOM_MODULE'
lib_deps = ${common.lib_deps_esp32}
extra_scripts = ${common.extra_scripts}

[env:d1_mini]
platform = ${common.platform_version}
board = d1_mini
framework = arduino
lang = en
build_flags = ${common.build_flags} '-DINTL_EN'
lib_deps = ${common.lib_deps_esp8266}
extra_script = ${common.extra_script}